generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String     @id @default(cuid())
  email       String     @unique
  password    String
  role        UserType   // Hanya PUSAT dan SYUBIYAH
  name        String
  syubiyah_id String?    // NULL untuk PUSAT, berisi ID syubiyah untuk SYUBIYAH
  isVerified  Boolean    @default(false)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  
  // Relations
  syubiyah    Syubiyah?  @relation(fields: [syubiyah_id], references: [id])
  posts       Post[]
  comments    Comment[]
  blogs       Blog[]
  donations   DonationTransaction[]
  userRoles   UserRole[]

  @@map("users")
}

model Syubiyah {
  id          String   @id @default(cuid())
  name        String
  provinsi    String   @default("") // Nama provinsi
  kabupaten   String   @default("") // Nama kabupaten/kota
  provinsiId  String?  // ID provinsi dari API wilayah
  kabupatenId String?  // ID kabupaten dari API wilayah
  description String?
  penanggungJawab      String?  // Nama penanggung jawab (opsional)
  noHpPenanggungJawab  String?  // No HP penanggung jawab (opsional)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  alumni      Alumni[]
  users       User[]   // Users dengan role SYUBIYAH yang mengelola syubiyah ini

  @@map("syubiyah")
}

model Mustahiq {
  id              String   @id @default(cuid())
  name            String
  profilePhoto    String?  // URL foto profil
  email           String?  @unique
  phone           String?
  
  // Alamat lengkap dengan API wilayah
  provinsi        String   @default("")
  kabupaten       String   @default("")
  kecamatan       String   @default("")
  desa            String   @default("")
  provinsiId      String?  // ID provinsi dari API wilayah
  kabupatenId     String?  // ID kabupaten dari API wilayah
  kecamatanId     String?  // ID kecamatan dari API wilayah
  desaId          String?  // ID desa dari API wilayah
  
  // Detail alamat
  namaJalan       String?  // Nama jalan/penanda/no rumah
  rt              String?  // RT
  rw              String?  // RW
  
  bidangKeahlian  String?  // Bidang keahlian (opsional)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  alumni          Alumni[]

  @@map("mustahiq")
}

model Alumni {
  id                String         @id @default(cuid())
  profilePhoto      String?        // URL foto profil
  fullName          String
  tahunMasuk        Int?           // Tahun masuk
  tahunKeluar       Int?           // Tahun keluar
  asalDaerah        String?        // Asal daerah
  syubiyahId        String?        // Syubiyah
  mustahiqId        String?        // Mustahiq
  tempatLahir       String?        // Tempat lahir
  tanggalLahir      DateTime?      // Tanggal lahir
  statusPernikahan  MaritalStatus? // Status pernikahan
  jumlahAnak        Int?           // Jumlah anak
  pendidikanTerakhir String?       // Pendidikan terakhir
  pekerjaan         String[]       // Pekerjaan/aktivitas (array)
  phone             String?        // No HP
  email             String         @unique
  username          String?        // Username untuk login (fallback ke phone jika kosong)
  penghasilanBulan  IncomeRange?   // Penghasilan per bulan
  
  // Alamat lengkap dengan API wilayah
  provinsi          String         @default("")
  kabupaten         String         @default("")
  kecamatan         String         @default("")
  desa              String         @default("")
  provinsiId        String?        // ID provinsi dari API wilayah
  kabupatenId       String?        // ID kabupaten dari API wilayah
  kecamatanId       String?        // ID kecamatan dari API wilayah
  desaId            String?        // ID desa dari API wilayah
  
  // Detail alamat
  namaJalan         String?        // Nama jalan/penanda/no rumah
  rt                String?        // RT
  rw                String?        // RW
  
  // Sistem autentikasi alumni terpisah
  password          String         // Password untuk login alumni (wajib)
  isVerified        Boolean        @default(false) // Status verifikasi alumni
  lastLogin         DateTime?      // Waktu login terakhir
  loginAttempts     Int            @default(0) // Jumlah percobaan login gagal
  lockedUntil       DateTime?      // Waktu hingga akun terkunci
  emailVerifiedAt   DateTime?      // Waktu verifikasi email
  passwordResetToken String?       // Token reset password
  passwordResetExpires DateTime?   // Waktu kadaluarsa token reset
  
  status        AlumniStatus @default(PENDING)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  
  // Relations
  syubiyah      Syubiyah?    @relation(fields: [syubiyahId], references: [id])
  mustahiq      Mustahiq?    @relation(fields: [mustahiqId], references: [id])
  eventRegistrations EventRegistration[]
  store         AlumniStore?

  @@map("alumni")
}

model Post {
  id          String        @id @default(cuid())
  title       String
  slug        String        @unique
  content     String
  excerpt     String?
  imageUrl    String?
  status      ContentStatus @default(PENDING)
  authorId    String
  categoryId  String?
  publishedAt DateTime?
  viewCount   Int           @default(0)
  visibility  PostVisibility @default(ALL_SYUBIYAH) // Visibilitas post
  targetSyubiyahIds String[]   @default([]) // Array ID syubiyah untuk visibilitas tertentu
  featured    Boolean       @default(false) // Artikel featured untuk slider
  featuredOrder Int?        // Urutan artikel featured (1-5)
  highlighted Boolean       @default(false) // Artikel highlighted untuk card tunggal (hanya 1 aktif)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  author      User          @relation(fields: [authorId], references: [id])
  category    Category?     @relation(fields: [categoryId], references: [id])
  comments    Comment[]
  tags        PostTag[]

  @@map("posts")
}

model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?  // Hex color untuk kategori
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  posts       Post[]

  @@map("categories")
}

model Comment {
  id        String        @id @default(cuid())
  content   String
  authorId  String
  postId    String
  parentId  String?       // Untuk reply/nested comments
  status    ContentStatus @default(PENDING)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  
  // Relations
  author    User          @relation(fields: [authorId], references: [id])
  post      Post          @relation(fields: [postId], references: [id], onDelete: Cascade)
  parent    Comment?      @relation("CommentReplies", fields: [parentId], references: [id])
  replies   Comment[]     @relation("CommentReplies")

  @@map("comments")
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  posts     PostTag[]

  @@map("tags")
}

model PostTag {
  id     String @id @default(cuid())
  postId String
  tagId  String
  
  // Relations
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([postId, tagId])
  @@map("post_tags")
}

model Blog {
  id          String        @id @default(cuid())
  title       String
  content     String
  excerpt     String?
  imageUrl    String?
  status      ContentStatus @default(PENDING)
  authorId    String
  publishedAt DateTime?
  featured    Boolean       @default(false) // Blog featured untuk slider
  featuredOrder Int?        // Urutan blog featured (1-5)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  author      User          @relation(fields: [authorId], references: [id])

  @@map("blogs")
}

model Event {
  id              String        @id @default(cuid())
  title           String
  description     String
  type            String        // seminar, reunion, workshop, etc.
  eventType       EventType     @default(OFFLINE) // online or offline
  onlineLink      String?       // zoom, youtube, etc link for online events
  date            DateTime
  location        String?
  imageUrl        String?       // banner image
  maxParticipants Int?
  status          EventStatus   @default(DRAFT)
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  
  // Relations
  formFields      EventFormField[]
  registrations   EventRegistration[]

  @@map("events")
}

model EventFormField {
  id          String            @id @default(cuid())
  eventId     String
  label       String
  type        EventFieldType
  required    Boolean           @default(false)
  options     Json?             // For select, checkbox, radio options
  order       Int               @default(0)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  
  // Relations
  event       Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  answers     EventRegistrationAnswer[]

  @@map("event_form_fields")
}

model EventRegistration {
  id          String        @id @default(cuid())
  eventId     String
  alumniId    String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  
  // Relations
  event       Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  alumni      Alumni        @relation(fields: [alumniId], references: [id], onDelete: Cascade)
  answers     EventRegistrationAnswer[]

  @@unique([eventId, alumniId])
  @@map("event_registrations")
}

model EventRegistrationAnswer {
  id             String            @id @default(cuid())
  registrationId String
  fieldId        String
  value          String
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt
  
  // Relations
  registration   EventRegistration @relation(fields: [registrationId], references: [id], onDelete: Cascade)
  field          EventFormField    @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@unique([registrationId, fieldId])
  @@map("event_registration_answers")
}

model DonationProgram {
  id             String   @id @default(uuid())
  title          String
  description    String
  type           DonationType // ENUM: 'wajib', 'sukarela', 'program'
  targetAmount   Int?     // for target-based donations
  deadline       DateTime? // for time-based campaigns
  startDate      DateTime
  endDate        DateTime?
  status         DonationStatus // ENUM: 'draft', 'aktif', 'selesai'
  visible        Boolean  @default(true)
  thumbnail      String?  // URL to uploaded thumbnail image
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  transactions   DonationTransaction[]

  @@map("donation_programs")
}

model DonationTransaction {
  id              String   @id @default(uuid())
  program         DonationProgram @relation(fields: [programId], references: [id])
  programId       String
  alumni          User     @relation(fields: [alumniId], references: [id])
  alumniId        String
  amount          Int
  paymentMethod   String   // e.g., 'manual'
  transferProof   String?  // URL to uploaded file
  status          PaymentStatus // ENUM: 'pending', 'approved', 'rejected'
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("donation_transactions")
}


// ===== ROLE & PERMISSION SYSTEM =====

model Role {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "Super Admin", "Admin Alumni", "Admin Berita", "Admin Event", "Admin Donasi", "Admin Laporan", "Viewer"
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  userRoles      UserRole[]
  rolePermissions RolePermission[]
  
  @@map("roles")
}

model Permission {
  id          String   @id @default(cuid())
  name        String   @unique // e.g., "dashboard.view", "alumni.create", "alumni.edit", "alumni.delete", "news.create", etc.
  module      String   // e.g., "dashboard", "alumni", "news", "events", "donations", "reports", "settings"
  action      String   // e.g., "view", "create", "edit", "delete", "manage"
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  rolePermissions RolePermission[]
  
  @@map("permissions")
}

model RolePermission {
  id           String     @id @default(cuid())
  roleId       String
  permissionId String
  createdAt    DateTime   @default(now())
  
  // Relations
  role         Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)
  
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Relations
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
  
  @@unique([userId, roleId])
  @@map("user_roles")
}

enum UserType {
  PUSAT
  SYUBIYAH
}

enum AlumniStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum ContentStatus {
  PENDING
  APPROVED
  REJECTED
}

enum DonationType {
  wajib
  sukarela
  program
}

enum DonationStatus {
  draft
  aktif
  selesai
}

enum PaymentStatus {
  pending
  approved
  rejected
  PENDING     // Menunggu pembayaran
  PAID        // Sudah dibayar
  CANCELLED   // Dibatalkan
  REFUNDED    // Dikembalikan
  FREE        // Gratis (tidak perlu bayar)
}

enum MaritalStatus {
  MENIKAH
  LAJANG
  DUDA
  JANDA
  BELUM_MENIKAH
}

enum IncomeRange {
  KURANG_1_JUTA
  SATU_3_JUTA
  TIGA_5_JUTA
  LIMA_10_JUTA
  LEBIH_10_JUTA
}

enum PostVisibility {
  ALL_SYUBIYAH     // Ditampilkan di semua syubiyah
  SPECIFIC_SYUBIYAH // Ditampilkan hanya di syubiyah tertentu
}

enum EventStatus {
  DRAFT     // Draft dengan info parsial
  PUBLISHED // Published dan bisa diakses alumni
}

enum EventType {
  ONLINE    // Event online (zoom, youtube, etc)
  OFFLINE   // Event offline/tatap muka
}

enum EventFieldType {
  TEXT      // Input text
  TEXTAREA  // Textarea
  SELECT    // Select dropdown
  CHECKBOX  // Checkbox
  RADIO     // Radio button
  EMAIL     // Email input
  PHONE     // Phone input
  NUMBER    // Number input
  DATE      // Date input
}



model OrganizationMember {
  id          String   @id @default(cuid())
  name        String
  position    String   // Jabatan
  department  String   // Departemen (Dewan Penyantun, Dewan Pengawas, dll)
  level       Int      @default(1) // Level hierarki (1 = tertinggi)
  parentId    String?  // ID parent untuk struktur hierarki
  city        String?  // Kota asal
  photo       String?  // URL foto
  description String?  // Deskripsi singkat
  email       String?  // Email
  phone       String?  // Nomor telepon
  isActive    Boolean  @default(true) // Status aktif
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Self-referencing relation untuk hierarki
  parent      OrganizationMember? @relation("OrganizationHierarchy", fields: [parentId], references: [id])
  children    OrganizationMember[] @relation("OrganizationHierarchy")

  @@map("organization_members")
}

// ===== UMKM ALUMNI MODELS =====

model ProductCategory {
  id          String   @id @default(cuid())
  name        String
  slug        String   @unique
  description String?
  icon        String?  // Icon untuk kategori (emoji atau icon name)
  color       String   @default("blue") // Warna tema kategori
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0) // Urutan tampilan kategori
  level       Int      @default(0) // Level hierarki (0=root, 1=sub, 2=sub-sub, dst)
  parentId    String?  // ID parent untuk struktur hierarki
  path        String?  // Path hierarki untuk query cepat (contoh: "elektronik/smartphone/android")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  // Relations
  products    Product[]
  parent      ProductCategory? @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children    ProductCategory[] @relation("CategoryHierarchy")
  
  // Unique constraint untuk nama dalam level yang sama
  @@unique([name, parentId])
  @@map("product_categories")
}

model AlumniStore {
  id              String   @id @default(cuid())
  name            String   // Nama toko/brand
  slug            String   @unique
  description     String?  // Deskripsi toko
  logo            String?  // URL logo toko
  banner          String?  // URL banner toko
  alumniId        String   @unique // Satu alumni satu toko
  
  // Kontak Toko
  whatsappNumber  String?  // Nomor WA toko
  instagramUrl    String?  // Instagram toko
  facebookUrl     String?  // Facebook toko
  websiteUrl      String?  // Website toko
  
  // Lokasi & Operasional
  address         String?  // Alamat lengkap toko
  city            String?  // Kota toko
  operatingHours  String?  // Jam operasional
  
  // Status
  isActive        Boolean  @default(true)
  isVerified      Boolean  @default(false)
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  alumni          Alumni   @relation(fields: [alumniId], references: [id], onDelete: Cascade)
  products        Product[]
  
  @@map("alumni_stores")
}

model Product {
  id              String          @id @default(cuid())
  name            String          // Nama produk
  slug            String          @unique
  description     String          // Deskripsi produk
  price           Decimal?        // Harga satuan
  unit            String?         // Satuan produk (kg, pcs, meter, dll)
  categoryId      String
  storeId         String          // Relasi ke AlumniStore
  
  // Marketplace Links
  shopeeUrl       String?         // Link Shopee
  tokopediaUrl    String?         // Link Tokopedia
  tiktokUrl       String?         // Link TikTok Shop
  
  // Media
  images          String[]        // Array URL gambar produk
  thumbnailImage  String?         // Gambar utama/thumbnail
  
  // Location & Shipping
  shippedFromCity String?         // Dikirim dari kota
  
  // Status & Visibility
  isActive        Boolean         @default(true)
  isApproved      Boolean         @default(true) // Auto-approved untuk alumni verified
  
  // Stats & Analytics
  viewCount       Int             @default(0)
  clickCount      Int             @default(0) // Total clicks ke marketplace
  shopeeClicks    Int             @default(0)
  tokopediaClicks Int             @default(0)
  tiktokClicks    Int             @default(0)
  whatsappClicks  Int             @default(0)
  
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Relations
  category        ProductCategory @relation(fields: [categoryId], references: [id])
  store           AlumniStore     @relation(fields: [storeId], references: [id], onDelete: Cascade)
  reviews         ProductReview[]
  
  @@map("products")
}

model ProductReview {
  id              String   @id @default(cuid())
  productId       String
  reviewerName    String
  reviewerEmail   String
  reviewerPhone   String?
  rating          Int      // 1-5 stars
  comment         String?
  isApproved      Boolean  @default(false)
  isPublic        Boolean  @default(true) // Apakah review ditampilkan publik
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  product         Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  @@map("product_reviews")
}

model GeneralConfig {
  id            String   @id @default(cuid())
  websiteTitle  String
  favicon       String?
  heroImages    Json     // Array of image objects: [{src, alt}]
  heroAutoplay  Boolean  @default(true)
  heroInterval  Int      @default(4000)
  footerCopyright String
  footerLinks   Json     // Array of {label, url}
  footerSocial  Json     // {instagram, facebook, youtube}
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
